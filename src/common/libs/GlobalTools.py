from robot.api.deco import library
from robot.api.deco import keyword
from robot.api import logger
import os
import urllib.parse

# It contain the global method to process special action in the execution of the test cases
@library
class GlobalTools:
    ###
    # It return true if a string contains another string.
    # -param str: It is the string where will be search.
    # -param substr: It is string to search in another string.
    # -return(bool): It is true if the str contains the substr.
    @keyword
    def string_contains_substr( self, str, substr):
        if str == None:
            return False
        if substr == None:
            return False
        if str.find( substr ) > 0 :
            return True
        return False
    ###
    # It return the type of a variable.
    # -param target(any): It is the a variable.
    # -return(string): It is the string with type of the variable.
    @keyword
    def Get_type(self, target ):
        return type( target ) 
    ###
    # It return a value of an attribute of an object, if the attribute not exists then return None.
    # -param obj(Object): It is the object to get the attribute.
    # -param attr(string): It is the name of the attribute if the object.
    # -return(any): It is the value of the attribute of the object.
    ###
    @keyword
    def get_attribute(self, obj, attr):
        if obj == None :
            return None
        if attr == None:
            return None
        if attr in obj.mAttrs:
            return obj.mAttrs[ attr ]
        return None
    
    @keyword
    def compare_object( self, oppA, oppB):
        dict = DictTools()
        keys1 = None
    ###
    # It add a value to a list, if the value exists in the list then the value is not added.
    # -param list(list): It is the list where the value will be added.
    # -param value(any): It is the element to be added to be added to the list.
    ###
    @keyword
    def list_add_unique_value(self, list, value):
        if list == None:
            return
        if value == None:
            return
        if not value in list:
            list.append( value )
    ###
    # It concat two list, but in the list generated by this containsunique elments.
    # -param listA: It is the first list to be concated.
    # -param ListB: It is the second list to be concated.
    # -return(lisy): It is the result list with the unique elemnets.
    ####
    @keyword
    def list_concat_unique_values( self, listA, listB ):
        res = []
        if ( listA == None ) and ( listB == None ):
            return res
        if listA == None:
            return listB
        if listB == None:
            return listA
        res = listA
        for key in listB:
            if not key in listA:
                res.append( key )
        return res
    def set_path_format(self, pathFile ):
        if pathFile == None:
            return ""
        pathFile = pathFile.replace("\\","/")
        parts = pathFile.split("/")
        pathFile = os.path.sep.join( parts)
        return pathFile
    ###
    # It return the project folder.
    # -return(String): It is the path of the project.
    ###
    @keyword
    def get_prj_folder(self, prjPath):
        if prjPath == None:
            rprjPath = ''
        prjPath = self.set_path_format( prjPath )
        dir = os.path.dirname( __file__ )
        src_pos = dir.index( 'src' )
        src_path = dir[ :src_pos ]
        src_path = src_path + prjPath
        sep = os.path.sep
        src_path = src_path.replace( sep + sep, sep )
        return src_path
    ###
    # It encode a string to URL format.
    # -param target(String): It is the string to encode to URL format.
    # -return(String): It is the string encoded.
    ###
    @keyword
    def url_encode( self, target ):
        if target == None:
            return None
        return urllib.parse.quote( target )
    ###
    # It decode a url to a comprensible string.
    # -param target(String): It is a string in URL format.
    # -return(String): It is the uncoded string.
    ###
    @keyword
    def url_decode( self, target ):
        if target == None:
            return None
        return urllib.parse.unquote( target )

    
